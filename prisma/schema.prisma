generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TicketRecords {
  id              String   @id @default(uuid()) @db.Uuid
  lastId          String?
  boughtTickets   Int      @default(0)
  freeTickets     Int      @default(0)
  usedTickets     Int      @default(0)
  rolloverTickets Int      @default(0)
  rolloverRatio   Int      @default(0)
  payableTickets  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
}

model Tournament {
  id                    String   @id @default(uuid()) @db.Uuid
  bId                   Int?     @unique @default(autoincrement())
  title                 String?
  start                 DateTime
  end                   DateTime
  totalStakes           Int      @default(0)
  uniqueUsers           Int      @default(0)
  paused                Boolean  @default(false)
  disbursed             Boolean? @default(false)
  numberOfUsersRewarded Int      @default(0)

  rounds      Round[]
  rewards     Reward[]
  Transaction Transaction[]

  @@index([totalStakes])
  @@index([start, end])
}

model SportTournament {
  id                    String   @id @default(uuid()) @db.Uuid
  bId                   Int?     @unique @default(autoincrement())
  title                 String?
  start                 DateTime
  end                   DateTime
  totalStakes           Int      @default(0)
  uniqueUsers           Int      @default(0)
  paused                Boolean  @default(false)
  numberOfUsersRewarded Int      @default(0)

  rewards Reward[]
  bets    SportBet[]

  @@index([totalStakes])
  @@index([start, end])
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  address   String   @unique
  username  String?  @unique
  avatar    String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stat Stat?

  rounds       Round[]
  players      Player[]
  rewards      Reward[]
  sportBets    SportBet[]
  sportRounds  SportRound[]
  transactions Transaction[]

  @@index([createdAt])
  @@index([updatedAt])
}

model Stat {
  id      String @id @default(uuid()) @db.Uuid
  tickets Float  @default(0)
  xp      Float? @default(0)

  total_wins   Int   @default(0)
  total_losses Int   @default(0)
  total_points Float @default(0.00)

  total_sport_wins   Int   @default(0)
  total_sport_losses Int   @default(0)
  total_sport_points Float @default(0.00)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastGoatBurntAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid

  @@index([xp])
  @@index([tickets])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([total_wins])
  @@index([total_points])
  @@index([total_losses])
  @@index([total_sport_wins])
  @@index([total_sport_points])
  @@index([total_sport_losses])
}

model Reward {
  id                    String     @id @default(uuid()) @db.Uuid
  earning               Decimal    @db.Decimal(15, 2)
  points                Float?
  type                  RewardType
  claimed               Claim
  claimable             Boolean    @default(false)
  totalTournamentPoints Float?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  sportTournamentId String? @db.Uuid
  gameTournamentId  String? @db.Uuid
  userId            String  @db.Uuid

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameTournament  Tournament?      @relation(fields: [gameTournamentId], references: [id], onDelete: Cascade)
  sportTournament SportTournament? @relation(fields: [sportTournamentId], references: [id], onDelete: Cascade)

  @@index([userId, claimed])
}

model Round {
  id                     String   @id @default(uuid()) @db.Uuid
  stake                  Int
  lives                  Int?
  point                  Float    @default(0.00)
  lottery_digits         String?
  lottery_outcome_digits String?
  game_type              GameType
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameTournament Tournament @relation(fields: [gameTournamentId], references: [id])

  gameTournamentId String @db.Uuid
  userId           String @db.Uuid

  @@index([point])
  @@index([stake])
  @@index([game_type])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([gameTournamentId])
}

model SportBet {
  id              String          @id @default(uuid()) @db.Uuid
  gameId          String?
  fixureId        String?
  status          BetStatus
  sport_type      SportType
  stake           Int
  potentialWin    Int
  elapsed         String?
  placebetOutcome PlacebetOutcome
  outcome         SportbetOutcome
  disbursed       Boolean         @default(false)
  goals           Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  league          Json?
  sportRound      SportRound?
  teams           Json?

  sportTournamentId String          @db.Uuid
  sportTournament   SportTournament @relation(fields: [sportTournamentId], references: [id])

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([userId])
  @@index([fixureId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([status, outcome])
  @@index([status, outcome, sportTournamentId])
}

model SportRound {
  id         String    @id @default(uuid()) @db.Uuid
  stake      Int
  sport_type SportType
  point      Float     @default(0.00)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  bet   SportBet @relation(fields: [betId], references: [id], onDelete: Cascade)
  betId String   @unique @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([updatedAt])
  @@index([sport_type])
  @@index([point, stake])
  @@index([userId, updatedAt])
}

model Game {
  id        String   @id @default(uuid()) @db.Uuid
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dealerId String @unique @db.Uuid
  dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  players Player[]

  @@index([createdAt])
  @@index([updatedAt])
}

model Player {
  id             String    @id @default(uuid()) @db.Uuid
  hand           Json[]
  score          Int
  stand          Boolean
  stake          Int?
  result         String?
  disconnectedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  gameId String @db.Uuid
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([updatedAt])
  @@index([userId])
}

model Dealer {
  id        String   @id @default(uuid()) @db.Uuid
  hand      Json[]
  score     Int
  stand     Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game?

  @@index([createdAt])
  @@index([updatedAt])
}

model Transaction {
  id        String    @id @default(uuid()) @db.Uuid
  key       String?
  tag       String?
  txId      String    @unique
  txStatus  TxStatus? @default(Pending)
  txSender  String?
  action    String?
  amount    Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user       User?       @relation(references: [id], fields: [userId])
  userId     String?     @db.Uuid
  tournament Tournament? @relation(references: [id], fields: [tourId])
  tourId     String?     @db.Uuid

  @@index([tag])
  @@index([userId])
  @@index([txSender])
  @@index([createdAt])
  @@index([updatedAt])
}

model LotteryDraw {
  id        String   @id @default(uuid()) @db.Uuid
  digits    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

enum TxStatus {
  Failed
  Dropped
  Pending
  Success
}

enum GameType {
  Dice
  LOTTERY
  BlindBox
  Roulette
  CoinFlip
  BlackJack
  SpaceInvader
}

enum BetStatus {
  ONGOING
  FINISHED
  NOT_STARTED
}

enum SportbetOutcome {
  WIN
  LOSE
  CANCELLED
  NOT_DECIDED
}

enum PlacebetOutcome {
  home
  away
  draw
}

enum SportType {
  NFL
  FOOTBALL
}

enum RewardType {
  GAME
  SPORT
}

enum Claim {
  DEFAULT
  PENDING
  SUCCESSFUL
}
